diff --git a/dataset_tool.py b/dataset_tool.py
index c59e629..80d1147 100755
--- a/dataset_tool.py
+++ b/dataset_tool.py
@@ -62,7 +62,6 @@ def open_image_folder(source_dir, *, max_images: Optional[int]):
                 labels = { x[0]: x[1] for x in labels }
             else:
                 labels = {}
-
     max_idx = maybe_min(len(input_images), max_images)
 
     def iterate_images():
@@ -70,7 +69,9 @@ def open_image_folder(source_dir, *, max_images: Optional[int]):
             arch_fname = os.path.relpath(fname, source_dir)
             arch_fname = arch_fname.replace('\\', '/')
             img = np.array(PIL.Image.open(fname))
-            yield dict(img=img, label=labels.get(arch_fname))
+            # Debug by AGR 03/17/2025
+            # yield dict(img=img, label=labels.get(arch_fname))
+            yield dict(img=img, label=labels.get(list(labels.keys())[idx]))
             if idx >= max_idx-1:
                 break
     return max_idx, iterate_images()
@@ -431,7 +432,6 @@ def convert_dataset(
         img.save(image_bits, format='png', compress_level=0, optimize=False)
         save_bytes(os.path.join(archive_root_dir, archive_fname), image_bits.getbuffer())
         labels.append([archive_fname, image['label']] if image['label'] is not None else None)
-
     metadata = {
         'labels': labels if all(x is not None for x in labels) else None
     }
diff --git a/generate.py b/generate.py
index f7f9619..1e9b4c2 100755
--- a/generate.py
+++ b/generate.py
@@ -118,7 +118,8 @@ def generate_images(
         z = torch.from_numpy(np.random.RandomState(seed).randn(1, G.z_dim)).to(device)
         img = G(z, label, truncation_psi=truncation_psi, noise_mode=noise_mode)
         img = (img.permute(0, 2, 3, 1) * 127.5 + 128).clamp(0, 255).to(torch.uint8)
-        PIL.Image.fromarray(img[0].cpu().numpy(), 'RGB').save(f'{outdir}/seed{seed:04d}.png')
+        img = np.squeeze(img, axis=3)
+        PIL.Image.fromarray(img[0].cpu().numpy(), 'L').save(f'{outdir}/seed{seed:04d}.png')
 
 
 #----------------------------------------------------------------------------
diff --git a/projector.py b/projector.py
index 36041a0..bbaeb13 100755
--- a/projector.py
+++ b/projector.py
@@ -18,7 +18,7 @@ import numpy as np
 import PIL.Image
 import torch
 import torch.nn.functional as F
-
+import torchvision
 import dnnlib
 import legacy
 
@@ -37,6 +37,7 @@ def project(
     verbose                    = False,
     device: torch.device
 ):
+    target = torchvision.transforms.functional.rgb_to_grayscale(target)
     assert target.shape == (G.img_channels, G.img_resolution, G.img_resolution)
 
     def logprint(*args):
@@ -65,6 +66,7 @@ def project(
     target_images = target.unsqueeze(0).to(device).to(torch.float32)
     if target_images.shape[2] > 256:
         target_images = F.interpolate(target_images, size=(256, 256), mode='area')
+    target_images = target_images.repeat(1, 3, 1, 1)
     target_features = vgg16(target_images, resize_images=False, return_lpips=True)
 
     w_opt = torch.tensor(w_avg, dtype=torch.float32, device=device, requires_grad=True) # pylint: disable=not-callable
@@ -96,7 +98,7 @@ def project(
         synth_images = (synth_images + 1) * (255/2)
         if synth_images.shape[2] > 256:
             synth_images = F.interpolate(synth_images, size=(256, 256), mode='area')
-
+        synth_images = synth_images.repeat(1, 3, 1, 1)
         # Features for synth images.
         synth_features = vgg16(synth_images, resize_images=False, return_lpips=True)
         dist = (target_features - synth_features).square().sum()
@@ -185,12 +187,17 @@ def run_projection(
 
     # Render debug output: optional video and projected image and W vector.
     os.makedirs(outdir, exist_ok=True)
+    # print(target_uint8.shape)
+    target_uint8 = np.mean(target_uint8, axis=2)
+    target_uint8 = np.array(np.expand_dims(target_uint8,axis=-1),dtype=np.uint8)
+    # print(target_uint8.shape)
     if save_video:
         video = imageio.get_writer(f'{outdir}/proj.mp4', mode='I', fps=10, codec='libx264', bitrate='16M')
         print (f'Saving optimization progress video "{outdir}/proj.mp4"')
         for projected_w in projected_w_steps:
             synth_image = G.synthesis(projected_w.unsqueeze(0), noise_mode='const')
             synth_image = (synth_image + 1) * (255/2)
+            # print(synth_image.shape)
             synth_image = synth_image.permute(0, 2, 3, 1).clamp(0, 255).to(torch.uint8)[0].cpu().numpy()
             video.append_data(np.concatenate([target_uint8, synth_image], axis=1))
         video.close()
@@ -200,8 +207,9 @@ def run_projection(
     projected_w = projected_w_steps[-1]
     synth_image = G.synthesis(projected_w.unsqueeze(0), noise_mode='const')
     synth_image = (synth_image + 1) * (255/2)
+    # print(synth_image.shape)
     synth_image = synth_image.permute(0, 2, 3, 1).clamp(0, 255).to(torch.uint8)[0].cpu().numpy()
-    PIL.Image.fromarray(synth_image, 'RGB').save(f'{outdir}/proj.png')
+    PIL.Image.fromarray(np.squeeze(synth_image), 'L').save(f'{outdir}/proj.png')
     np.savez(f'{outdir}/projected_w.npz', w=projected_w.unsqueeze(0).cpu().numpy())
 
 #----------------------------------------------------------------------------
